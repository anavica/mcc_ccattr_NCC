enlaces <- feed.extract(atom$link)
#obtenemos la tabla con los enlaces de descarga
enlaces_tab <- enlaces$items
enlaces_tab
i = 2
atom <- slice(prov_enlaces_tab, i)
#importamos la RSS
enlaces <- feed.extract(atom$link)
#obtenemos la tabla con los enlaces de descarga
enlaces_tab <- enlaces$items
enlaces_tab
View(enlaces_tab)
prov_enlaces_tab$title
prov_enlaces_tab$nombre
prov_enlaces_tab <- mutate(prov_enlaces_tab, nombre = c("-A CORUÑA","-LUGO", "-OURENSE", "-VIGO"))
link_descarga <- NULL
for(i in (length(link_descarga)+1):nrow(prov_enlaces_tab)){
print(i)
atom <- slice(prov_enlaces_tab, i)
#importamos la RSS
enlaces <- feed.extract(atom$link)
#obtenemos la tabla con los enlaces de descarga
enlaces_tab <- enlaces$items
#filtramos la tabla con el nombre de la ciudad
link_descarga[[i]] <- filter(enlaces_tab, str_detect(title, prov_enlaces_tab$nombre[i])) %>% pull(link)
}
link_descarga
i = 1
print(i)
atom <- slice(prov_enlaces_tab, i)
#importamos la RSS
enlaces <- feed.extract(atom$link)
#obtenemos la tabla con los enlaces de descarga
enlaces_tab <- enlaces$items
enlaces_tab
View(enlaces_tab)
prov_enlaces_tab <- mutate(prov_enlaces_tab, nombre = c("-A CORU","-LUGO", "-OURENSE", "-VIGO"))
atom <- slice(prov_enlaces_tab, i)
#importamos la RSS
enlaces <- feed.extract(atom$link)
#obtenemos la tabla con los enlaces de descarga
enlaces_tab <- enlaces$items
filter(enlaces_tab, str_detect(title, prov_enlaces_tab$nombre[i])) %>% pull(link)
#filtramos la tabla con el nombre de la ciudad
link_descarga[[i]] <- filter(enlaces_tab, str_detect(title, prov_enlaces_tab$nombre[i])) %>% pull(link)
link_descarga[[1]]
link_descarga[[1]] <- str_replace(link_descarga[[1]], "�", "Ñ")
link_descarga[[1]]
#función de descargar y descomprimir
descarga_edif <- function(x){
temp <- tempfile()
download.file(URLencode(x), temp)
unzip(temp, exdir = "buildings")
}
#aplicamos la función a todos los enlaces de la lista
map(link_descarga, descarga_edif)
edificios_rutas <- dir_ls("buildings", regexp = "building.gml")
edificios <- map(edificios_rutas, st_read, quiet = TRUE)
edificios <- map(edificios, st_transform, crs = 25830)
prov <- str_to_title(prov_enlaces_tab$nombre) %>%
str_replace("-","")
prov
prov[1] <- "A Coruña"
names(edificios) <- prov
#2) unión de todos los datos
edificios <- do.call(rbind, edificios)
#identificador de los diferentes datos
id <- row.names(edificios)
head(id)
#reemplazamos los números
id <- str_replace(id, ".[0-9]{1,}$", "")
#3) añadimos columnas y el identificador
edificios <- mutate(edificios,
beginning = str_replace(beginning, "^-", "0000") %>%
ymd_hms() %>% as_date(),
ciudad = id)
unique(edificios$ciudad)
cities <- unique(edificios$ciudad)
ciudad_point <- tmaptools::geocode_OSM(cities,
as.sf = TRUE)
mapview::mapview(ciudad_point)
plot(cidad_point)
plot(ciudad_point)
ciudad_point
ciudad_point <- st_transform(ciudad_point, 25830)
point_bf <- st_buffer(ciudad_point, 2500)
edificios <- st_intersection(edificios, point_bf)
#encontrar 15 clases
br <- classIntervals(year(edificios$beginning), 16, "quantile")
#crear etiquetas
lab <- names(print(br, under = "<", over = ">", cutlabels = FALSE))
#categorizar el año
edificios <- mutate(edificios,
yr_cl = cut(year(beginning), br$brks, labels = lab, include.lowest = TRUE))
#colores
col_spec <- RColorBrewer::brewer.pal(11, "Spectral")
#función de una gama de colores
col_spec_fun <- colorRampPalette(col_spec)
#descarga de fuente
sysfonts::font_add_google("Montserrat", "Montserrat")
showtext::showtext_opts(dpi = 300)
#usar showtext para fuentes
showtext::showtext_auto()
#crear los mapas
filter(edificios, ciudad == "Vigo") %>%
ggplot() +
geom_sf(aes(fill = yr_cl), colour = "transparent") +
scale_fill_manual(values = col_spec_fun(16)) +
labs(title = "ZARAGOZA",
caption = "© Dominic Royé (@dr_xeo) | Data: Catastro",
fill = "") +
guides(fill = guide_legend(keywidth = .7,
keyheight = 2.7)) +
theme_void(base_family = "Montserrat") +
theme(panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
legend.justification = .5,
legend.text = element_text(colour = "white", size = 12),
plot.title = element_text(colour = "white",
hjust = .5, size = 60,
margin = margin(t = 30)),
plot.caption = element_text(colour = "white",
margin = margin(b = 20),
hjust = .5, size = 16),
plot.margin = margin(r = 40, l = 40))
#crear los mapas
filter(edificios, ciudad == "Vigo") %>%
ggplot() +
geom_sf(aes(fill = yr_cl), colour = "transparent") +
scale_fill_manual(values = col_spec_fun(16)) +
labs(title = "VIGO",
caption = "© Dominic Royé (@dr_xeo) | Data: Catastro",
fill = "") +
guides(fill = guide_legend(keywidth = .7,
keyheight = 2.7)) +
theme_void(base_family = "Montserrat") +
theme(panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
legend.justification = .5,
legend.text = element_text(colour = "white", size = 12),
plot.title = element_text(colour = "white",
hjust = .5, size = 60,
margin = margin(t = 30)),
plot.caption = element_text(colour = "white",
margin = margin(b = 20),
hjust = .5, size = 16),
plot.margin = margin(r = 40, l = 40))
ggsave("vigo_crecimiento.pdf", width = 16, height = 15)
edificios$ciudad
unique(edificios$ciudad)
#crear los mapas
filter(edificios, ciudad == "A Coruña") %>%
ggplot() +
geom_sf(aes(fill = yr_cl), colour = "transparent") +
scale_fill_manual(values = col_spec_fun(16)) +
labs(title = "A CORUÑA",
caption = "© Dominic Royé (@dr_xeo) | Data: Catastro",
fill = "") +
guides(fill = guide_legend(keywidth = .7,
keyheight = 2.7)) +
theme_void(base_family = "Montserrat") +
theme(panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
legend.justification = .5,
legend.text = element_text(colour = "white", size = 12),
plot.title = element_text(colour = "white",
hjust = .5, size = 60,
margin = margin(t = 30)),
plot.caption = element_text(colour = "white",
margin = margin(b = 20),
hjust = .5, size = 16),
plot.margin = margin(r = 40, l = 40))
ggsave("coruña_crecimiento.pdf", width = 16, height = 15)
#crear los mapas
filter(edificios, ciudad == "Lugo") %>%
ggplot() +
geom_sf(aes(fill = yr_cl), colour = "transparent") +
scale_fill_manual(values = col_spec_fun(16)) +
labs(title = "LUGO",
caption = "© Dominic Royé (@dr_xeo) | Data: Catastro",
fill = "") +
guides(fill = guide_legend(keywidth = .7,
keyheight = 2.7)) +
theme_void(base_family = "Montserrat") +
theme(panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
legend.justification = .5,
legend.text = element_text(colour = "white", size = 12),
plot.title = element_text(colour = "white",
hjust = .5, size = 60,
margin = margin(t = 30)),
plot.caption = element_text(colour = "white",
margin = margin(b = 20),
hjust = .5, size = 16),
plot.margin = margin(r = 40, l = 40))
ggsave("lugo_crecimiento.pdf", width = 16, height = 15)
cities
edificios
edificios$ciudad
edificios <- map(edificios_rutas, st_read, quiet = TRUE)
edificios <- map(edificios, st_transform, crs = 25830)
prov <- str_to_title(prov_enlaces_tab$nombre) %>%
str_replace("-","")
prov[1] <- "A Coruña"
names(edificios) <- prov
edificios
prov
prov <- str_to_title(prov_enlaces_tab$nombre) %>%
str_replace("-","")
prov[1] <- "A Coruña"
prov
names(edificios)
names(edificios) <- prov
#2) unión de todos los datos
edificios <- do.call(rbind, edificios)
#identificador de los diferentes datos
id <- row.names(edificios)
head(id)
#reemplazamos los números
id <- str_replace(id, ".[0-9]{1,}$", "")
id
unique(id)
#3) añadimos columnas y el identificador
edificios <- mutate(edificios,
beginning = str_replace(beginning, "^-", "0000") %>%
ymd_hms() %>% as_date(),
ciudad = id)
unique(edificios$ciudad)
cities <- unique(edificios$ciudad)
ciudad_point <- tmaptools::geocode_OSM(cities,
as.sf = TRUE)
ciudad_point <- st_transform(ciudad_point, 25830)
point_bf <- st_buffer(ciudad_point, 2500)
mapview::mapview(point_df)
point_bf
mapview::mapview(point_bf)
cities
cities[3] <- "32003 Ourense"
ciudad_point <- tmaptools::geocode_OSM(cities,
as.sf = TRUE)
ciudad_point <- st_transform(ciudad_point, 25830)
point_bf <- st_buffer(ciudad_point, 2500)
mapview::mapview(point_bf)
edificios <- st_intersection(edificios, point_bf)
#encontrar 15 clases
br <- classIntervals(year(edificios$beginning), 16, "quantile")
#crear etiquetas
lab <- names(print(br, under = "<", over = ">", cutlabels = FALSE))
#categorizar el año
edificios <- mutate(edificios,
yr_cl = cut(year(beginning), br$brks, labels = lab, include.lowest = TRUE))
#colores
col_spec <- RColorBrewer::brewer.pal(11, "Spectral")
#función de una gama de colores
col_spec_fun <- colorRampPalette(col_spec)
library(tmap)
#descarga de fuente
sysfonts::font_add_google("Montserrat", "Montserrat")
showtext::showtext_opts(dpi = 300)
#usar showtext para fuentes
showtext::showtext_auto()
filter(edificios, ciudad == "Lugo") %>%
ggplot() +
geom_sf(aes(fill = yr_cl), colour = "transparent") +
scale_fill_manual(values = col_spec_fun(16)) +
labs(title = "LUGO",
caption = "© Dominic Royé (@dr_xeo) | Data: Catastro",
fill = "") +
guides(fill = guide_legend(keywidth = .7,
keyheight = 2.7)) +
theme_void(base_family = "Montserrat") +
theme(panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
legend.justification = .5,
legend.text = element_text(colour = "white", size = 12),
plot.title = element_text(colour = "white",
hjust = .5, size = 60,
margin = margin(t = 30)),
plot.caption = element_text(colour = "white",
margin = margin(b = 20),
hjust = .5, size = 16),
plot.margin = margin(r = 40, l = 40))
unique(edificios$ciudad)
#crear los mapas
filter(edificios, ciudad == "Ourense") %>%
ggplot() +
geom_sf(aes(fill = yr_cl), colour = "transparent") +
scale_fill_manual(values = col_spec_fun(16)) +
labs(title = "LUGO",
caption = "© Dominic Royé (@dr_xeo) | Data: Catastro",
fill = "") +
guides(fill = guide_legend(keywidth = .7,
keyheight = 2.7)) +
theme_void(base_family = "Montserrat") +
theme(panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
legend.justification = .5,
legend.text = element_text(colour = "white", size = 12),
plot.title = element_text(colour = "white",
hjust = .5, size = 60,
margin = margin(t = 30)),
plot.caption = element_text(colour = "white",
margin = margin(b = 20),
hjust = .5, size = 16),
plot.margin = margin(r = 40, l = 40))
filter(edificios, ciudad == "Ourense") %>%
ggplot() +
geom_sf(aes(fill = yr_cl), colour = "transparent") +
scale_fill_manual(values = col_spec_fun(16)) +
labs(title = "OURENSE",
caption = "© Dominic Royé (@dr_xeo) | Data: Catastro",
fill = "") +
guides(fill = guide_legend(keywidth = .7,
keyheight = 2.7)) +
theme_void(base_family = "Montserrat") +
theme(panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
legend.justification = .5,
legend.text = element_text(colour = "white", size = 12),
plot.title = element_text(colour = "white",
hjust = .5, size = 60,
margin = margin(t = 30)),
plot.caption = element_text(colour = "white",
margin = margin(b = 20),
hjust = .5, size = 16),
plot.margin = margin(r = 40, l = 40))
ggsave("ourense_crecimiento.pdf", width = 16, height = 15)
library(ecmwfr)
?wf_set_key
wf_set_key(user = "dominic.roye@gmail.com",
key = "a94be6d2-5d61-4f15-b571-db02745a162f",
service = "cds")
wf_set_key(user = "dominic.roye@gmail.com",
key = "a94be6d2-5d61-4f15-b571-db02745a162f",
service = "webapi")
wf_set_key(user = "dominic.roye@gmail.com",
key = "8990:a94be6d2-5d61-4f15-b571-db02745a162f",
service = "webapi")
wf_set_key(user = "dominic.roye@gmail.com",
key = "8990:a94be6d2-5d61-4f15-b571-db02745a162f",
service = "cds")
wf_set_key(service = "webapi")
wf_set_key(service = "cds")
wf_set_key(user = "dominic.roye@gmail.com",
key = "a94be6d2-5d61-4f15-b571-db02745a162f",
service = "cds")
wf_get_key(user = "dominic.roye@gmail.com")
?wf_get_key
wf_get_key(user = "dominic.roye@gmail.com", service = "cds")
wf_get_key(user = "dominic.roye@gmail.com", service = "cds")
wf_set_key("dominic.roye@gmail.com")
wf_set_key("dominic.roye@gmail.com", service = "cds")
wf_set_key("dominic.roye@gmail.com", service = "cds")
wf_set_key("dominic.roye@gmail.com", service = "cds")
wf_set_key(user = "8990", key = "a94be6d2-5d61-4f15-b571-db02745a162f", service = "cds")
request <- list(
temporal_resolution = "daily",
experiment = "ssp5_8_5",
level = "single_levels",
variable = "near_surface_air_temperature",
model = "awi_cm_1_1_mr",
area = c(40,10,30,15), #N,W,S,E
format = "zip",
dataset_short_name = "projections-cmip6",
target = "download.zip"
)
getwd()
extract_request <- wf_request(user = "8990",
request = request,
transfer = TRUE,
path = getwd())
request <- list(
temporal_resolution = "daily",
experiment = c("ssp5_8_5", "ssp1_2_6"),
level = "single_levels",
variable = "near_surface_air_temperature",
model = c("awi_cm_1_1_mr", "cnrm_cm6_1"),
area = c(40,10,30,15), #N,W,S,E
format = "zip",
dataset_short_name = "projections-cmip6",
target = "download.zip"
)
extract_request <- wf_request(user = "8990",
request = request,
transfer = TRUE,
path = getwd())
request1 <- list(
temporal_resolution = "daily",
experiment = "ssp5_8_5",
level = "single_levels",
variable = "near_surface_air_temperature",
model = c("awi_cm_1_1_mr", "cnrm_cm6_1"),
area = c(40,10,30,15), #N,W,S,E
format = "zip",
dataset_short_name = "projections-cmip6",
target = "download.zip"
)
request2 <- list(
temporal_resolution = "daily",
experiment = "ssp1_2_6",
level = "single_levels",
variable = "near_surface_air_temperature",
model = c("awi_cm_1_1_mr", "cnrm_cm6_1"),
area = c(40,10,30,15), #N,W,S,E
format = "zip",
dataset_short_name = "projections-cmip6",
target = "download.zip"
)
extract_request <- wf_request(user = "8990",
request = request1,
transfer = TRUE,
path = getwd())
?wf_request
request1 <- list(
temporal_resolution = "daily",
experiment = "ssp5_8_5",
level = "single_levels",
variable = "near_surface_air_temperature",
model = "awi_cm_1_1_mr",
area = c(40,10,30,15), #N,W,S,E
format = "zip",
dataset_short_name = "projections-cmip6",
target = "download.zip"
)
request2 <- list(
temporal_resolution = "daily",
experiment = "ssp1_2_6",
level = "single_levels",
variable = "near_surface_air_temperature",
model = "awi_cm_1_1_mr",
area = c(40,10,30,15), #N,W,S,E
format = "zip",
dataset_short_name = "projections-cmip6",
target = "download.zip"
)
extract_request <- wf_request(user = "8990",
request = list(request1, request2),
transfer = TRUE,
path = getwd())
extract_request <- wf_request(user = "8990",
request = request1,
transfer = TRUE,
path = getwd())
extract_request
download_pull <- function(x){
wf_request(user = "8990",
request = x,
transfer = TRUE,
path = getwd())
}
request_list <- list(request1, request2)
library(tidyverse)
walk(request_list, download_pull)
library(fs)
# cargamos los paquetes
library(feedeR)
library(sf)
library(fs)
library(tidyverse)
library(lubridate)
library(classInt)
library(tmap)
library(rvest)
url <- "http://www.catastro.minhap.es/INSPIRE/buildings/ES.SDGC.bu.atom.xml"
# importamos los RSS con enlaces de provincias
prov_enlaces <- feed.extract(url)
str(prov_enlaces) #estructura es lista
# extraemos la tabla con los enlaces
prov_enlaces_tab <- as_tibble(prov_enlaces$items) %>%
mutate(title = repair_encoding(title))
prov_enlaces_tab
val_atom <- filter(prov_enlaces_tab, str_detect(title, "Valencia")) %>% pull(link)
# importamos la RSS
val_enlaces <- feed.extract(val_atom)
# obtenemos la tabla con los enlaces de descarga
val_enlaces_tab <- val_enlaces$items
val_enlaces_tab <- mutate(val_enlaces_tab, title = repair_encoding(title),
link = repair_encoding(link))
# filtramos la tabla con el nombre de la ciudad
val_link <- filter(val_enlaces_tab, str_detect(title, "VALENCIA")) %>% pull(link)
val_link
# creamos un archivo temporal
temp <- tempfile()
# descargamos los datos
download.file(URLencode(val_link), temp)
# descomprimimos a una carpeta llamda buildings
unzip(temp, exdir = "buildings")
# obtenemos la ruta con el archivo
file_val <- dir_ls("buildings", regexp = "building.gml")
# importamos los datos
buildings_val <- st_read(file_val)
file_val
# descomprimimos a una carpeta llamda buildings
unzip(temp, exdir = "buildings")
# obtenemos la ruta con el archivo
file_val <- dir_ls("buildings", regexp = "building.gml")
# importamos los datos
buildings_val <- st_read(file_val)
str(buildings_val)
names(buildings_val)
summary(buildings_val$numberOfFloorsAboveGround)
summary(as.numeric(buildings_val$numberOfFloorsAboveGround))
buildings_val$numberOfFloorsAboveGround
buildings_val$numberOfFloorsAboveGround
blogdown::serve_site()
setwd("~/GitHub/mcc_ccattr_NCC")
load("~/GitHub/mcc_ccattr_NCC/10cities_data.RData")
load("~/GitHub/mcc_ccattr_NCC/TmeanModelled.RData")
install.packages("styler")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
